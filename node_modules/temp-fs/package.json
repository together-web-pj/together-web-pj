{
  "_args": [
    [
      {
        "raw": "temp-fs@^0.9.9",
        "scope": null,
        "escapedName": "temp-fs",
        "name": "temp-fs",
        "rawSpec": "^0.9.9",
        "spec": ">=0.9.9 <0.10.0",
        "type": "range"
      },
      "/home/user/work/version/reaction/node_modules/browserstack-local"
    ]
  ],
  "_from": "temp-fs@>=0.9.9 <0.10.0",
  "_id": "temp-fs@0.9.9",
  "_inCache": true,
  "_location": "/temp-fs",
  "_nodeVersion": "5.4.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/temp-fs-0.9.9.tgz_1458287298695_0.10946966824121773"
  },
  "_npmUser": {
    "name": "jakwings",
    "email": "jakwings@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {
    "fs.realpath": "1.0.0",
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "minimatch": "3.0.4",
    "once": "1.4.0",
    "path-is-absolute": "1.0.1"
  },
  "_requested": {
    "raw": "temp-fs@^0.9.9",
    "scope": null,
    "escapedName": "temp-fs",
    "name": "temp-fs",
    "rawSpec": "^0.9.9",
    "spec": ">=0.9.9 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/browserstack-local"
  ],
  "_resolved": "https://registry.npmjs.org/temp-fs/-/temp-fs-0.9.9.tgz",
  "_shasum": "8071730437870720e9431532fe2814364f8803d7",
  "_shrinkwrap": null,
  "_spec": "temp-fs@^0.9.9",
  "_where": "/home/user/work/version/reaction/node_modules/browserstack-local",
  "author": {
    "name": "Jak Wings",
    "email": "jakwings@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jakwings/node-temp-fs/issues"
  },
  "dependencies": {
    "rimraf": "~2.5.2"
  },
  "description": "Temporary files, directories or names!",
  "devDependencies": {
    "mocha": "~2.4.5",
    "should": "~8.2.2"
  },
  "directories": {},
  "dist": {
    "shasum": "8071730437870720e9431532fe2814364f8803d7",
    "tarball": "https://registry.npmjs.org/temp-fs/-/temp-fs-0.9.9.tgz"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "files": [
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "gitHead": "06916c51f326cdf87cd466ea17ad06738a01a379",
  "homepage": "https://github.com/jakwings/node-temp-fs",
  "keywords": [
    "tmp",
    "temp",
    "tmpfile",
    "tempfile",
    "tmpdir",
    "tempdir",
    "temporary",
    "filename",
    "random"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jakwings",
      "email": "jakwings@gmail.com"
    }
  ],
  "name": "temp-fs",
  "optionalDependencies": {},
  "readme": "# temp-fs\n\n[![Build Status](https://travis-ci.org/jakwings/node-temp-fs.svg)](https://travis-ci.org/jakwings/node-temp-fs)\n[![NPM version](https://badge.fury.io/js/temp-fs.svg)](http://badge.fury.io/js/temp-fs)\n\nA temporary file and directory creator for io.js and Node.jsâ„¢.\n\nJust like raszi/node-tmp and bruce/node-temp, it can safely create temporary\nfiles and directories without worrying a lot of about race conditions as long\nas you don't do some tricky things. ;-) You can also let this module track the\nfiles or directories you created and delete them when the program exits.\n\n\n## Installation\n\n```bash\nnpm install temp-fs\n```\n\n```javascript\nvar tempfs = require('temp-fs');\n\n// Create a tempfile in the system-provided tempdir.\ntempfs.open(function (err, file) {\n    if (err) { throw err; }\n\n    console.log(file.path, file.fd);\n    // async\n    file.unlink(function () {\n        console.log('File delected');\n    });\n    // sync\n    // No problem even if unlink() is called twice.\n    file.unlink();\n});\n\n// Create a tempdir in current directory.\ntempfs.mkdir({\n    dir: '.',\n    recursive: true,  // It and its content will be remove recursively.\n    track: true  // Track this directory.\n}, function (err, dir) {\n    if (err) { throw err; }\n\n    console.log(dir.path, dir.recursive);\n    throw new Error('Since it is tracked, tempfs will remove it for you.');\n    dir.unlink();\n});\n```\n\n\n## APIs\n\n### options\n\n*   `limit: Number`\n\n    The maximum number of chance to retry before throwing an error. It should\n    be a finite number. Default: 5\n\n*   `recursive: Boolean`\n\n    Whether `unlink()` should remove a directory recursively. Default: false\n\n*   `track: Boolean`\n\n    If set to `true`, let temp-fs manage the the current file/directory for you\n    even if the global tracking is off. If set to `false`, don't let temp-fs\n    manage it even if the global tracking is on. Otherwise, use the current\n    global setting.\n\n*   `mode: Number`\n\n    File mode (default: 0600) or directory mode (default: 0700) to use.\n\n*   `name: String`\n\n    If set, join the two paths `options.dir || tempfs.dir()` and\n    `options.name` together and use the result as the customized\n    filename/pathname.\n\n*   `dir: String`\n\n    Where to put the generated tempfile or tempdir. Also see `options.name`\n    above. Default: tempfs.dir()\n\n*   `prefix: String`\n\n    The prefix for the generated random name. Default: \"tmp-\"\n\n*   `suffix: String`\n\n    The suffix for the generated random name. Default: \"\"\n\n*   `template: String`\n\n    A string containing some capital letters Xs for substitution with random\n    characters. Then it is used as part of the filename/dirname. Just like what\n    you do with the `mktemp (3)` function in the C library.\n\n### tempfs.track(on = true)\n\nUse it to switch global files/directories tracking on or off. Turn it on if\nyou don't want to manually delete everything. When it is turned off, all\nrecorded files and directories will not be removed but still kept in case it\nis turned on again before the program exits.\n\nThis switch does not affect manually tracked files through `options.track`.\nThey will be removed automatically on exit.\n\n**Note: When an uncaught exception occurs, all tracked temporary files and\ndirectories will be removed no matter it is on or off.**\n\n### tempfs.dir()\n\nReturn the path of a system-provided tempdir as `require('os').tmpdir()` does.\nYou should not make any assumption about whether the path contains a trailing\npath separator, or it is a real path. On most system it is not a fixed path,\nand it can be changed by the user environment. When in doubt, check it first.\n\n### tempfs.name([options])\n\nReturn a customized/random filename/dirname. Options are documented at\n[options](#options).\n\n### tempfs.open([options], [callback])\n\nTry to open a unique tempfile asynchronously. The callback function receives\ntwo arguments `error` and `file`. If `error` is null, `file` has these\nproperties:\n\n*   `path`: The absolute path to the tempfile.\n*   `fd`: An integer file descriptor.\n*   `unlink`: A special function for you to delete the file. If you invoke it\n    with a callback function, it will become asynchronous. If the file is not\n    tracked, it may throw when an error occurs or the first argument of the\n    callback function will be an Error object.\n\n### tempfs.openSync([options]): file\n\nThe synchronous version of `tempfs.open`. It will throw when an error happens.\n\n### tempfs.mkdir([options], [callback])\n\nTry to create a new tempdir asynchronously. The callback function receives two\narguments `error` and `dir`. If `error` is null, `dir` has these properties:\n\n*   `path`: The absolute path to the tempdir.\n*   `recursive`: Whether unlink() will remove the tempdir recursively.\n*   `unlink`: A special function for you to remove the directory. If you\n    invoke it with a callback function, it will become asynchronous. If the\n    directory is not tracked, it may throw when an error occurs or the first\n    argument of the callback function will be an Error object.\n\n### tempfs.mkdirSync([options]): dir\n\nThe synchronous version of `tempfs.mkdir`. It will throw when an error happens.\n\n### tempfs.clear([callback])\n\nRemove all tracked files and directories asynchronously.\n\n### tempfs.clearSync()\n\nRemove all tracked files and directories synchronously.\n\n\n## License\n\nThe MIT License (MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jakwings/node-temp-fs.git"
  },
  "scripts": {
    "test": "node node_modules/mocha/bin/mocha --reporter spec test/*.js"
  },
  "version": "0.9.9"
}
