{
  "_args": [
    [
      {
        "raw": "transliteration@github:reactioncommerce/transliteration",
        "scope": null,
        "escapedName": "transliteration",
        "name": "transliteration",
        "rawSpec": "github:reactioncommerce/transliteration",
        "spec": "github:reactioncommerce/transliteration",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:reactioncommerce/transliteration.git",
          "sshUrl": "git+ssh://git@github.com/reactioncommerce/transliteration.git",
          "httpsUrl": "git+https://github.com/reactioncommerce/transliteration.git",
          "gitUrl": "git://github.com/reactioncommerce/transliteration.git",
          "shortcut": "github:reactioncommerce/transliteration",
          "directUrl": "https://raw.githubusercontent.com/reactioncommerce/transliteration/master/package.json"
        }
      },
      "/home/user/work/version/reaction"
    ]
  ],
  "_from": "reactioncommerce/transliteration",
  "_id": "transliteration@1.6.2",
  "_inCache": true,
  "_location": "/transliteration",
  "_phantomChildren": {
    "code-point-at": "1.1.0",
    "decamelize": "1.2.0",
    "get-caller-file": "1.0.2",
    "is-fullwidth-code-point": "1.0.0",
    "os-locale": "2.1.0",
    "read-pkg-up": "2.0.0",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "string-width": "2.1.1",
    "strip-ansi": "3.0.1",
    "which-module": "2.0.0",
    "wrap-ansi": "2.1.0",
    "y18n": "3.2.1",
    "yargs-parser": "7.0.0"
  },
  "_requested": {
    "raw": "transliteration@github:reactioncommerce/transliteration",
    "scope": null,
    "escapedName": "transliteration",
    "name": "transliteration",
    "rawSpec": "github:reactioncommerce/transliteration",
    "spec": "github:reactioncommerce/transliteration",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:reactioncommerce/transliteration.git",
      "sshUrl": "git+ssh://git@github.com/reactioncommerce/transliteration.git",
      "httpsUrl": "git+https://github.com/reactioncommerce/transliteration.git",
      "gitUrl": "git://github.com/reactioncommerce/transliteration.git",
      "shortcut": "github:reactioncommerce/transliteration",
      "directUrl": "https://raw.githubusercontent.com/reactioncommerce/transliteration/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/reactioncommerce/transliteration.git#699d48cc8dd9a64f1a2773e1b36b6faa4bbdca2f",
  "_shasum": "9f8f00cebe5571ad22d3006e1ef2711bfed6cea2",
  "_shrinkwrap": null,
  "_spec": "transliteration@github:reactioncommerce/transliteration",
  "_where": "/home/user/work/version/reaction",
  "author": {
    "name": "Andy Hu"
  },
  "bin": {
    "transliterate": "lib/bin/transliterate",
    "slugify": "lib/bin/slugify"
  },
  "bugs": {
    "url": "https://github.com/andyhu/transliteration/issues"
  },
  "dependencies": {
    "yargs": "^8.0.2"
  },
  "description": "Unicode to ACSII transliteration / slugify module for node.js, browser, Web Worker, ReactNative and CLI.",
  "devDependencies": {
    "babel-core": "^6.25.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.24.1",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-es2015-ie": "^6.7.0",
    "babelify": "^7.3.0",
    "browserify": "^14.4.0",
    "coveralls": "^2.13.1",
    "es5-shim": "^4.5.9",
    "eslint": "^4.0.0",
    "eslint-config-airbnb-base": "^11.1.3",
    "eslint-plugin-import": "^2.3.0",
    "gulp": "^3.9.1",
    "gulp-babel": "^6.1.2",
    "gulp-es3ify": "^0.0.0",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "^2.6.0",
    "gulp-uglify": "^3.0.0",
    "gulp-util": "^3.0.8",
    "nyc": "^11.0.2",
    "rimraf": "^2.6.1",
    "tap-spec": "^4.1.1",
    "tape": "^4.6.3",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0",
    "zuul": "^3.11.1"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "gitHead": "699d48cc8dd9a64f1a2773e1b36b6faa4bbdca2f",
  "homepage": "https://github.com/andyhu/transliteration#readme",
  "keywords": [
    "transliterate",
    "transliteration",
    "utf8",
    "slug",
    "slugify",
    "romanization",
    "unicode",
    "unidecode"
  ],
  "license": "MIT",
  "main": "lib/node/index.js",
  "name": "transliteration",
  "optionalDependencies": {},
  "readme": "# Transliteration\n\n[![Build Status](https://travis-ci.org/andyhu/transliteration.svg)](https://travis-ci.org/andyhu/transliteration)\n[![Dependencies](https://img.shields.io/david/andyhu/transliteration.svg)](https://github.com/andyhu/transliteration/blob/master/package.json)\n[![Dev Dependencies](https://img.shields.io/david/dev/andyhu/transliteration.svg)](https://github.com/andyhu/transliteration/blob/master/package.json)\n[![Coverage Status](https://coveralls.io/repos/github/andyhu/node-transliteration/badge.svg?branch=master)](https://coveralls.io/github/andyhu/transliteration?branch=master)\n[![NPM Version](https://img.shields.io/npm/v/transliteration.svg)](https://www.npmjs.com/package/transliteration)\n[![Bower Version](https://img.shields.io/bower/v/transliteration.svg)](https://github.com/andyhu/transliteration)\n[![NPM Download](https://img.shields.io/npm/dm/transliteration.svg)](https://www.npmjs.com/package/transliteration)\n[![License](https://img.shields.io/npm/l/transliteration.svg)](https://github.com/andyhu/transliteration/blob/master/LICENSE.txt)\n[![PRs](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/andyhu/transliteration)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/node-transliteration.svg)](https://saucelabs.com/u/node-transliteration)\n\nTransliteration / slugify module for node.js, browser, Web Worker, ReactNative and CLI. It provides the ability to transliterate UTF-8 characters into corresponding pure ASCII; so they can be safely displayed, used as URL slugs or file names.\n\n## Demo\n[example.html](http://rawgit.com/andyhu/transliteration/master/demo/example.html)\n\n## Installation\n\n### Node.js\n```bash\nnpm install transliteration --save\n```\n```javascript\nimport { transliterate as tr, slugify } from 'transliteration';\n\ntr('你好, world!'); // Ni Hao , world!\nslugify('你好, world!'); // ni-hao-world\n```\n### Browser\n__CDN:__\n```html\n\n<script src=\"https://unpkg.com/transliteration/lib/browser/transliteration.min.js\"></script>\n```\n__Bower:__\n```bash\n# Install bower if not already installed\n# npm install bower -g\nbower install transliteration\n```\n```html\n<html>\n<head>\n  <script src=\"bower_components/transliteration/transliteration.min.js\"></script>\n</head>\n<body>\n  <script>\n    transl('你好, world!'); // Ni Hao , world!\n    slugify('你好, world!'); // ni-hao-world\n  </script>\n</body>\n</html>\n```\n\n### Browser support\n`transliteration` has a good browser compatibility with all major browsers (including IE 6-8 if used with `es5-shim`).\n\n### CLI\n\n```bash\nnpm install transliteration -g\n\ntransliterate 你好 # Ni Hao\nslugify 你好 # ni-hao\necho 你好 | slugify -S # ni-hao\n```\n\n### ReactNative\n```javascript\nimport { transliterate, slugify } from 'transliteration/src/main/browser';\n```\n\n## Breaking changes\n###1.5.0\nSince version 1.5.0, `transliteration` module requires minimum node version v6.0.\n\n###1.0.0\n\nPlease note that the code has been entirely refactored since version 1.0.0. Be careful when you plan to upgrade from v0.1.x or v0.2.x to v1.0.x\n\n__Changes:__\n* The `options` parameter of `transliterate` now is an `Object` (In 0.1.x it's a string `unknown`).\n* Added `transliterate.config` and `slugify.config`.\n* Unknown string will be transliterated as `[?]` instead of `?`.\n* In the browser, global variables have been changed to `window.transl` and `windnow.slugify`. Other global variables are removed.\n\n## Usage\n\n### transliterate(str, [options])\n\nTransliterates the string `str` and return the result. Characters which this module doesn't recognise will be defaulted to the placeholder from the `unknown` argument in the configuration option, defaults to `[?]`.\n\n__Options:__ (optional)\n```javascript\n{\n  /* Unicode characters that are not in the database will be replaced with `unknown` */\n  unknown: '[?]', // default: [?]\n  /* Custom replacement of the strings before transliteration */\n  replace: { source1: target1, source2: target2, ... }, // Object form of argument\n  replace: [[source1, target1], [source2, target2], ... ], // Array form of argument\n  /* Strings in the ignore list will be bypassed from transliteration */\n  ignore: [str1, str2] // default: []\n}\n```\n\n__transliterate.config([optionsObj])__\n\nBind options globally so any following calls will be using `optoinsObj` by default. If `optionsObj` argument is omitted, it will return current default option object.\n```javascript\ntransliterate.config({ replace: [['你好', 'Hello']] });\ntransliterate('你好, world!'); // Result: 'Hello, world!'. This equals transliterate('你好, world!', { replace: [['你好', 'Hello']] });\n```\n\n__Example__\n```javascript\nimport { transliterate as tr } from 'transliteration';\ntr('你好，世界'); // Ni Hao , Shi Jie\ntr('Γεια σας, τον κόσμο'); // Geia sas, ton kosmo\ntr('안녕하세요, 세계'); // annyeonghaseyo, segye\ntr('你好，世界', { replace: {你: 'You'}, ignore: ['好'] }) // You 好, Shi Jie\ntr('你好，世界', { replace: [['你', 'You']], ignore: ['好'] }) // You 好, Shi Jie (option in array form)\n// or use configurations\ntr.config({ replace: [['你', 'You']], ignore: ['好'] });\ntr('你好，世界') // You 好, Shi Jie\n// get configurations\nconsole.log(tr.config());\n```\n\n### slugify(str, [options])\nConverts Unicode string to slugs. So it can be safely used in URL or file name.\n\n__Options:__ (optional)\n```javascript\n{\n  /* Whether to force slags to be lowercased */\n  lowercase: false, // default: true\n  /* Separator of the slug */\n  separator: '-', // default: '-'\n  /* Custom replacement of the strings before transliteration */\n  replace: { source1: target1, source2: target2, ... },\n  replace: [[source1, target1], [source2, target2], ... ], // default: []\n  /* Strings in the ignore list will be bypassed from transliteration */\n  ignore: [str1, str2] // default: []\n}\n```\nIf `options` is not provided, it will use the above default values.\n\n__slugify.config([optionsObj])__\n\nBind options globally so any following calls will be using `optoinsObj` by default. If `optionsObj` argument is omitted, it will return current default option object.\n```javascript\nslugify.config({ replace: [['你好', 'Hello']] });\nslugify('你好, world!'); // Result: 'hello-world'. This equals slugify('你好, world!', { replace: [['你好', 'Hello']] });\n```\n\n__Example:__\n```javascript\nimport { slugify } from 'transliteration';\nslugify('你好，世界'); // ni-hao-shi-jie\nslugify('你好，世界', { lowercase: false, separator: '_' }); // Ni_Hao_Shi_Jie\nslugify('你好，世界', { replace: {你好: 'Hello', 世界: 'world'}, separator: '_' }); // hello_world\nslugify('你好，世界', { replace: [['你好', 'Hello'], ['世界', 'world']], separator: '_' }); // hello_world (option in array form)\nslugify('你好，世界', { ignore: ['你好'] }); // 你好shi-jie\n// or use configurations\nslugify.config({ lowercase: false, separator: '_' });\nslugify('你好，世界'); // Ni_Hao_Shi_Jie\n// get configurations\nconsole.log(slugify.config());\n```\n\n### Usage in browser\n`transliteration` can be loaded as an AMD / CommonJS module, or as global variables (UMD).\n\nWhen using it in the browser, by default it will create global variables under `window` object:\n```javascript\ntransl('你好, World'); // window.transl\n// or\nslugify('Hello, 世界'); // window.slugify\n```\nIf the variable names conflict with other libraries in your project or you prefer not to use global variables, use noConfilict() before loading libraries which contain the conflicting variables.:\n\n__Load the library globally__\n\n```javascript\nvar tr = transl.noConflict();\nconsole.log(transl); // undefined\ntr('你好, World'); // Ni Hao , World\nvar slug = slugify.noConfilict();\nslug('你好, World'); // ni-hao-world\nconsole.log(slugify); // undefined\n```\n\n### Usage in command line\n```\n➜  ~ transliterate --help\nUsage: transliterate <unicode> [options]\n\nOptions:\n  --version      Show version number                                                       [boolean]\n  -u, --unknown  Placeholder for unknown characters                        [string] [default: \"[?]\"]\n  -r, --replace  Custom string replacement                                     [array] [default: []]\n  -i, --ignore   String list to ignore                                         [array] [default: []]\n  -S, --stdin      Use stdin as input                                     [boolean] [default: false]\n  -h, --help     Show help                                                                 [boolean]\n\nExamples:\n  transliterate \"你好, world!\" -r 好=good -r          Replace `,` into `!` and `world` into\n  \"world=Shi Jie\"                                     `shijie`.\n                                                      Result: Ni good, Shi Jie!\n  transliterate \"你好，世界!\" -i 你好 -i ，           Ignore `你好` and `，`.\n                                                      Result: 你好，Shi Jie !\n                                                      Result: 你好,world!\n```\n\n```\n➜  ~ slugify --help\nUsage: slugify <unicode> [options]\n\nOptions:\n  --version        Show version number                                                     [boolean]\n  -l, --lowercase  Use lowercase                                           [boolean] [default: true]\n  -s, --separator  Separator of the slug                                     [string] [default: \"-\"]\n  -r, --replace    Custom string replacement                                   [array] [default: []]\n  -i, --ignore     String list to ignore                                       [array] [default: []]\n  -S, --stdin      Use stdin as input                                     [boolean] [default: false]\n  -h, --help       Show help                                                               [boolean]\n\nExamples:\n  slugify \"你好, world!\" -r 好=good -r \"world=Shi     Replace `,` into `!` and `world` into\n  Jie\"                                                `shijie`.\n                                                      Result: ni-good-shi-jie\n  slugify \"你好，世界!\" -i 你好 -i ，                 Ignore `你好` and `，`.\n                                                      Result: 你好，shi-jie\n\n```\n\n### Caveats\n`transliteration` supports almost all common languages whereas there might be quirks in some specific languages. For example, Kanji characters in Japanese will be transliterated as Chinese Pinyin. I couldn't find a better way to distinguish Chinese Hanzi and Japanese Kanji. So if you would like to romanize Japanese Kanji, please consider [kuroshiro](https://github.com/hexenq/kuroshiro.js).\n\nIf you find any issues, please raise a GitHub issue. Thanks!\n\n### License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/andyhu/transliteration.git"
  },
  "scripts": {
    "build": "gulp",
    "coverage": "nyc npm test",
    "coveralls": "nyc npm test && nyc report -r=text-lcov | coveralls",
    "lint": "eslint src/**/*.js test/**/*.js gulpfile.babel.js",
    "postcoverage": "rimraf .nyc_output",
    "postcoveralls": "rimraf .nyc_output",
    "prebuild": "npm run test",
    "prepublish": "npm run build",
    "pretest": "npm run lint",
    "pretest:browser": "npm run build",
    "test": "npm run test:node",
    "test:browser": "zuul --no-coverage -- test/browser/*.js",
    "test:node": "tape -r babel-core/register test/node/*.js | tap-spec"
  },
  "version": "1.6.2",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=6.0.0"
      },
      "pkgid": "transliteration@1.6.2"
    }
  ]
}
