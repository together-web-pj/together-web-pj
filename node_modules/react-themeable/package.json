{
  "_args": [
    [
      {
        "raw": "react-themeable@^1.1.0",
        "scope": null,
        "escapedName": "react-themeable",
        "name": "react-themeable",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/home/user/work/version/reaction/node_modules/react-autowhatever"
    ]
  ],
  "_from": "react-themeable@>=1.1.0 <2.0.0",
  "_id": "react-themeable@1.1.0",
  "_inCache": true,
  "_location": "/react-themeable",
  "_nodeVersion": "5.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-themeable-1.1.0.tgz_1463752754401_0.7947939008008689"
  },
  "_npmUser": {
    "name": "markdalgleish",
    "email": "mark.john.dalgleish@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-themeable@^1.1.0",
    "scope": null,
    "escapedName": "react-themeable",
    "name": "react-themeable",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-autowhatever"
  ],
  "_resolved": "https://registry.npmjs.org/react-themeable/-/react-themeable-1.1.0.tgz",
  "_shasum": "7d4466dd9b2b5fa75058727825e9f152ba379a0e",
  "_shrinkwrap": null,
  "_spec": "react-themeable@^1.1.0",
  "_where": "/home/user/work/version/reaction/node_modules/react-autowhatever",
  "author": {
    "name": "Mark Dalgleish"
  },
  "bugs": {
    "url": "https://github.com/markdalgleish/react-themeable/issues"
  },
  "dependencies": {
    "object-assign": "^3.0.0"
  },
  "description": "Utility for making React components easily themeable",
  "devDependencies": {
    "babel": "^5.6.14",
    "babel-istanbul": "^0.2.10",
    "chai": "^3.0.0",
    "codecov.io": "^0.1.5",
    "mocha": "^2.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "7d4466dd9b2b5fa75058727825e9f152ba379a0e",
    "tarball": "https://registry.npmjs.org/react-themeable/-/react-themeable-1.1.0.tgz"
  },
  "gitHead": "0f15ce521684303b00e749148c5947a03093c522",
  "homepage": "https://github.com/markdalgleish/react-themeable#readme",
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "markdalgleish",
      "email": "mark.john.dalgleish@gmail.com"
    }
  ],
  "name": "react-themeable",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://img.shields.io/travis/markdalgleish/react-themeable/master.svg?style=flat-square)](http://travis-ci.org/markdalgleish/react-themeable) [![Coverage](https://img.shields.io/codecov/c/github/markdalgleish/react-themeable/master.svg?style=flat-square)](https://codecov.io/github/markdalgleish/react-themeable) [![npm](https://img.shields.io/npm/v/react-themeable.svg?style=flat-square)](https://www.npmjs.com/package/react-themeable)\n\n# react-themeable\n\nUtility for making React components easily themeable.\n\n**This project is still experimental, so feedback from component authors would be greatly appreciated!**\n\n## Why?\n\nThe React community is highly fragmented when it comes to styling. How do we write components that can happily co-exist with all of these competing approaches?\n\nWith react-themeable, you can support custom themes provided by [CSS Modules](https://github.com/css-modules/css-modules), [Radium](http://projects.formidablelabs.com/radium/), [Aphrodite](https://github.com/Khan/aphrodite), [React Style](https://github.com/js-next/react-style), [JSS](https://github.com/jsstyles/jss), global CSS or inline styles as easily as this:\n\n```js\n<MyComponent theme={theme} />\n```\n\n## Install\n\n`npm install --save react-themeable`\n\n## Usage\n\n`react-themeable` exposes just a single function.\n\nThis function is designed to accept a `theme` prop inside of your `render` method. This then returns a small helper function that accepts a key and a series of style names.\n\n```js\nconst theme = themeable(this.props.theme);\n...\n<div {...theme(key, ...styleNames)} />\n```\n\n*Note: A unique key for each themed element is required for [Radium](http://projects.formidablelabs.com/radium/) to work correctly.*\n\nThis helper function detects whether a theme is class or style based, and creates the appropriate attributes for you.\n\nFor example:\n\n```js\nimport React, { Component } from 'react';\nimport themeable from 'react-themeable';\n\nclass MyComponent extends Component {\n  render() {\n    const theme = themeable(this.props.theme);\n\n    return (\n      <div {...theme(1, 'root')}>\n        <div {...theme(2, 'foo', 'bar')}>Foo Bar</div>\n        <div {...theme(3, 'baz')}>Baz</div>\n      </div>\n    );\n  }\n}\n```\n\nA theme can now be passed to your component like so:\n\n### CSS Modules\n\n```css\n.foo { color: red; }\n.foo:hover { color: green; }\n.bar { color: blue; }\n```\n\n```js\nimport theme from './MyComponentTheme.css';\n...\n<MyComponent theme={theme} />\n```\n\n### Radium\n\n```js\nimport Radium from 'radium';\n\nconst theme = {\n  foo: {\n    color: 'red',\n    ':hover': {\n      color: 'green'\n    }\n  },\n  bar: {\n    color: 'blue'\n  }\n};\n\nconst ThemedMyComponent = Radium(MyComponent);\n...\n<ThemedMyComponent theme={theme} />\n```\n\n### Aphrodite\n\n```js\nimport { StyleSheet, css } from 'aphrodite';\n\nconst theme = StyleSheet.create({\n  foo: {\n    color: 'red',\n    ':hover': {\n      color: 'green'\n    }\n  },\n  bar: {\n    color: 'blue'\n  }\n});\n...\n<MyComponent theme={[ theme, css ]} />\n```\n\n### React Style\n\n```js\nimport StyleSheet from 'react-style';\n\nconst theme = StyleSheet.create({\n  foo: {\n    color: 'red'\n  },\n  bar: {\n    color: 'blue'\n  }\n});\n...\n<MyComponent theme={theme} />\n```\n\n### JSS\n\n```js\nimport jss from 'jss';\n\nconst sheet = jss.createStyleSheet({\n  foo: {\n    color: 'red'\n  },\n  bar: {\n    color: 'blue'\n  }\n}).attach();\n...\n<MyComponent theme={sheet.classes} />\n```\n\n### Global CSS\n\n```css\n.MyComponent__foo { color: red; }\n.MyComponent__foo:hover { color: green; }\n.MyComponent__bar { color: blue; }\n```\n\n```js\nconst theme = {\n  foo: 'MyComponent__foo',\n  bar: 'MyComponent__bar'\n};\n...\n<MyComponent theme={theme} />\n```\n\n### Inline styles\n\n```js\nconst theme = {\n  foo: {\n    color: 'red'\n  },\n  bar: {\n    color: 'blue'\n  }\n};\n...\n<MyComponent theme={theme} />\n```\n\n## License\n\n[MIT](http://markdalgleish.mit-license.org)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/markdalgleish/react-themeable.git"
  },
  "scripts": {
    "build": "babel src -d dist",
    "coverage": "cat ./coverage/coverage.json | ./node_modules/codecov.io/bin/codecov.io.js",
    "prepublish": "npm run build",
    "test": "babel-istanbul cover _mocha -- --compilers js:babel/register && babel-istanbul check-coverage --branches 100"
  },
  "version": "1.1.0"
}
