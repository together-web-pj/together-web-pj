{
  "_args": [
    [
      {
        "raw": "flatten-obj@^3.1.0",
        "scope": null,
        "escapedName": "flatten-obj",
        "name": "flatten-obj",
        "rawSpec": "^3.1.0",
        "spec": ">=3.1.0 <4.0.0",
        "type": "range"
      },
      "/home/user/work/version/reaction"
    ]
  ],
  "_from": "flatten-obj@>=3.1.0 <4.0.0",
  "_id": "flatten-obj@3.1.1",
  "_inCache": true,
  "_location": "/flatten-obj",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/flatten-obj-3.1.1.tgz_1501140830094_0.06649152422323823"
  },
  "_npmUser": {
    "name": "watson",
    "email": "w@tson.dk"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "flatten-obj@^3.1.0",
    "scope": null,
    "escapedName": "flatten-obj",
    "name": "flatten-obj",
    "rawSpec": "^3.1.0",
    "spec": ">=3.1.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/flatten-obj/-/flatten-obj-3.1.1.tgz",
  "_shasum": "a54efeb45af230462cd881ed5ada1d1cdaf24631",
  "_shrinkwrap": null,
  "_spec": "flatten-obj@^3.1.0",
  "_where": "/home/user/work/version/reaction",
  "author": {
    "name": "Thomas Watson Steen",
    "email": "w@tson.dk"
  },
  "bugs": {
    "url": "https://github.com/watson/flatten-obj/issues"
  },
  "coordinates": [
    55.6716224,
    12.5655428
  ],
  "dependencies": {
    "isobj": "^1.0.0"
  },
  "description": "Converts an object literal with deeply nested nodes to a simple key/value object",
  "devDependencies": {
    "standard": "^10.0.2",
    "tape": "^4.7.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-PyxxiUNTcuh2Ey9ooWlYILcPeh6/OdCyLrRWQejtCYqzcuJrWlATftbX/z447AvmIMKDEcAwBE8dEXz94Zlc8A==",
    "shasum": "a54efeb45af230462cd881ed5ada1d1cdaf24631",
    "tarball": "https://registry.npmjs.org/flatten-obj/-/flatten-obj-3.1.1.tgz"
  },
  "gitHead": "c83273b651044dca785435e5afbaf0635c56eefa",
  "homepage": "https://github.com/watson/flatten-obj",
  "keywords": [
    "mongo",
    "mongodb",
    "flatten",
    "compound",
    "keys",
    "update",
    "flatten",
    "nested",
    "dot"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "watson",
      "email": "w@tson.dk"
    }
  ],
  "name": "flatten-obj",
  "optionalDependencies": {},
  "readme": "# flatten-obj\n\nConverts an object literal with deeply nested nodes to a simple\nkey/value object. In other words converts this:\n\n```js\n{\n  foo: 1,\n  bar: {\n    sub1: 2,\n    sub2: {\n      sub3: 3\n    }\n  }\n}\n```\n\nTo this:\n\n```js\n{\n  foo: 1,\n  'bar.sub1': 2,\n  'bar.sub2.sub3': 3\n}\n```\n\n[![Build status](https://travis-ci.org/watson/flatten-obj.svg?branch=master)](https://travis-ci.org/watson/flatten-obj)\n[![Standard - JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\n## Installation\n\n```\nnpm install flatten-obj\n```\n\n## Usage\n\n```js\nvar flatten = require('flatten-obj')()\n\nvar obj = {\n  foo: {\n    bar: 1\n  }\n}\n\n// outputs `{ 'foo.bar': 1 }`\nconsole.log(flatten(obj))\n```\n\n### Blacklist\n\nSome objects migth seem like object literals, but shouldn't be\nflattened. To avoid this, you can supply a list of classes that\nshouldn't be flattened when the object is traversed:\n\n```js\nvar Klass = function () {\n  this.baz = 1\n}\n\nvar flatten = require('flatten-obj')({ blacklist: [Klass] })\n\nvar obj = {\n  foo: {\n    bar: new Klass()\n  }\n}\n\n// outputs `{ 'foo.bar': { baz: 1 } }`\nconsole.log(flatten(obj))\n```\n\n### Custom separator\n\nYou can use a custom separator character to join keys:\n\n```js\nvar flatten = require('flatten-obj')({ separator: '/' })\n\nvar obj = {\n  foo: {\n    bar: 42\n  }\n}\n\n// outputs `{ 'foo/bar': 42 }`\nconsole.log(flatten(obj))\n```\n\n### Leaves\n\nOnly return the leaf nodes\n\n```js\nvar flatten = require('flatten-obj')({ onlyLeaves: true })\n\nvar obj = {\n  sub: {\n    foo: 1,\n    bar: {\n      baz: 2\n    }\n  }\n}\n\n// outputs `{ foo: 1, baz: 2 }`\nconsole.log(flatten(obj))\n```\n\n## Gotchas\n\n### MongoDB data types\n\nMongoDB data types like `ObjectId` or `Timestamp` looks like regular\nobject literals and should be handled with care. So you would normally\nwant to add those to the blacklist:\n\n```js\nvar mongodb = require('mongodb')\nvar flatten = require('flatten-obj')({ blacklist: [\n  mongodb.ObjectID,\n  mongodb.DBRef,\n  mongodb.Timestamp,\n  mongodb.MinKey,\n  mongodb.MaxKey,\n  mongodb.Long\n]})\n```\n\n### Arrays\n\nThis module currenly leaves arrays and their content in place. I.e. the\nkeys `foo` and `bar` in the following object isn't modified:\n\n```js\n{\n  foo: [1, 2, 3],\n  bar: [{ foo: 1 }, { bar: 2 }]\n}\n```\n\nIf you are familiar with MongoDB you know though that it's possible to\nupdate single elements of an array using the dot-notation-syntax.\n\nOpen a pull request or tell me about your use case if you'd like the\nabove object to be converted to:\n\n```js\n{\n  foo: [1, 2, 3],\n  'bar.0.foo': 1,\n  'bar.1.bar': 2\n}\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/watson/flatten-obj.git"
  },
  "scripts": {
    "test": "standard && node test.js"
  },
  "version": "3.1.1"
}
