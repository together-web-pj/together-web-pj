{
  "_args": [
    [
      {
        "raw": "react-taco-table@^0.5.0",
        "scope": null,
        "escapedName": "react-taco-table",
        "name": "react-taco-table",
        "rawSpec": "^0.5.0",
        "spec": ">=0.5.0 <0.6.0",
        "type": "range"
      },
      "/home/user/work/version/reaction"
    ]
  ],
  "_from": "react-taco-table@>=0.5.0 <0.6.0",
  "_id": "react-taco-table@0.5.1",
  "_inCache": true,
  "_location": "/react-taco-table",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-taco-table-0.5.1.tgz_1497447981752_0.18770060408860445"
  },
  "_npmUser": {
    "name": "pbeshai",
    "email": "peter.beshai@gmail.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {
    "fbjs": "0.8.14",
    "loose-envify": "1.3.1"
  },
  "_requested": {
    "raw": "react-taco-table@^0.5.0",
    "scope": null,
    "escapedName": "react-taco-table",
    "name": "react-taco-table",
    "rawSpec": "^0.5.0",
    "spec": ">=0.5.0 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-taco-table/-/react-taco-table-0.5.1.tgz",
  "_shasum": "90e310d5d5c6273aed221f65cdfed623d3c589ec",
  "_shrinkwrap": null,
  "_spec": "react-taco-table@^0.5.0",
  "_where": "/home/user/work/version/reaction",
  "author": {
    "name": "Peter Beshai"
  },
  "bugs": {
    "url": "https://github.com/pbeshai/react-taco-table/issues"
  },
  "dependencies": {
    "classnames": "^2.2.5",
    "d3-format": "^1.0.0",
    "d3-scale": "^1.0.0",
    "d3-scale-chromatic": "^1.0.0",
    "lodash.curry": "^4.0.1",
    "prop-types": "^15.5.10",
    "stable": "^0.1.5"
  },
  "description": "A react component for creating tables configured by a set of columns.",
  "devDependencies": {
    "babel": "^6.5.2",
    "babel-core": "^6.14.0",
    "babel-loader": "^6.2.5",
    "babel-preset-es2015": "^6.14.0",
    "babel-preset-react": "^6.11.1",
    "babel-preset-react-hmre": "^1.1.1",
    "baggage-loader": "^0.2.4",
    "chai": "^3.5.0",
    "css-loader": "^0.23.1",
    "enzyme": "^2.4.1",
    "eslint": "^2.10.2",
    "eslint-config-airbnb": "^9.0.1",
    "eslint-plugin-import": "^1.10.0",
    "eslint-plugin-jsx-a11y": "^1.4.2",
    "eslint-plugin-react": "^5.1.1",
    "extract-text-webpack-plugin": "^1.0.1",
    "grunt": "^1.0.1",
    "grunt-babel": "^6.0.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-compress": "^1.2.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-sass": "^1.2.0",
    "grunt-shell": "^1.3.0",
    "grunt-webpack": "^1.0.11",
    "html-webpack-plugin": "^2.16.0",
    "jsdoc": "^3.4.0",
    "json-loader": "^0.5.4",
    "karma": "^1.2.0",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-mocha": "^1.1.1",
    "karma-sinon-chai": "^1.2.3",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.8.0",
    "lolex": "^1.5.0",
    "minami": "github:pbeshai/minami",
    "mocha": "^3.0.2",
    "node-sass": "^4.5.2",
    "null-loader": "^0.1.1",
    "raw-loader": "^0.5.1",
    "react": "^15.3.0",
    "react-addons-perf": "^15.3.0",
    "react-addons-test-utils": "^15.3.0",
    "react-dom": "^15.3.0",
    "sass-loader": "^3.2.3",
    "sinon": "^1.17.5",
    "sinon-chai": "^2.8.0",
    "style-loader": "^0.13.1",
    "webpack": "^1.13.2",
    "webpack-dev-server": "^1.15.1"
  },
  "directories": {},
  "dist": {
    "shasum": "90e310d5d5c6273aed221f65cdfed623d3c589ec",
    "tarball": "https://registry.npmjs.org/react-taco-table/-/react-taco-table-0.5.1.tgz"
  },
  "gh-pages-deploy": {
    "staticpath": "site/dist",
    "prep": [
      "docs",
      "site-build"
    ]
  },
  "gitHead": "db059ad7d051aefbaf00aea7f7a870e59711968a",
  "homepage": "https://github.com/pbeshai/react-taco-table#readme",
  "keywords": [
    "table",
    "component",
    "react",
    "react-component",
    "ui",
    "data table",
    "heatmap"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "pbeshai",
      "email": "peter.beshai@gmail.com"
    }
  ],
  "name": "react-taco-table",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.3",
    "react-dom": "^15.3"
  },
  "readme": "# react-taco-table\n\n[![npm version](https://badge.fury.io/js/react-taco-table.svg)](https://badge.fury.io/js/react-taco-table)\n\nA [React](https://facebook.github.io/react/) component for creating tables configured by a set of columns.\n\nExamples with live demos are available here: http://pbeshai.github.io/react-taco-table/examples.html\n\n# Installation\n\nInstall via NPM by running\n\n```\nnpm install react-taco-table --save\n```\n\nThen including in your application as:\n\n```js\nimport { TacoTable } from 'react-taco-table';\n\n// Include CSS with webpack or equivalent -- or use your own\nimport 'react-taco-table/dist/react-taco-table.css';\n```\n\n# Usage\n\nAn *almost minimal* example is as follows:\n\n```js\nimport React from 'react';\nimport { TacoTable, DataType, Formatters } from 'react-taco-table';\n\nconst data = [\n  { label: 'The first item', value: 12, rating: 5.3216 },\n  { label: 'Another item', value: 8, rating: 4.9173 },\n  { label: 'The end of the road', value: 94, rating: 2.6139 },\n];\n\nconst columns = [\n  {\n    id: 'label',\n    type: DataType.String,\n    header: 'Label',\n  },\n  {\n    id: 'value',\n    type: DataType.Number,\n    header: 'Value',\n  },\n  {\n    id: 'rating',\n    type: DataType.Number,\n    header: 'Rating',\n    renderer: Formatters.decFormat(2),\n  },\n];\n\nclass ExampleAlmostMinimal extends React.Component {\n  render() {\n    return <TacoTable columns={columns} data={data} />;\n  }\n}\n\nexport default ExampleAlmostMinimal;\n```\n\nOutputs a table equivalent to:\n\n| Label | Value | Rating |\n| --- | --- | --- |\n| The first item | 12 | 5.32 |\n| Another item | 8 | 4.92 |\n| The end of the road | 94 | 2.61 |\n\n\nFor full configuration options for columns, see **Column Definition** below or the docs.\n\n### Column Definition\n\nColumns are defined by objects with the following format:\n\n| Name | Type     | Description   |\n| :----| :------  | :------------ |\n| `id` | String | The id of the column. Typically corresponds to a key in the rowData object. |\n| `[bottomDataRender]` | Function or Function[] or String or String[] | `function(columnSummary, { column, rowData, tableData, columns, bottomData })`<br>A function that specifies how to render the bottom data (if enabled on the table). Use an array for multiple rows. The `rowData` is only populated if `bottomData` of the TacoTable is an array. If a string is provided, it is rendered directly. |\n| `[className]` | String | The class name to be applied to both `<td>` and `<th>` |\n| `[firstSortDirection]` | Boolean | The direction which this column gets sorted by on first click |\n| `[header]` | Renderable | What is rendered in the column header. If not provided, uses the columnId. |\n| `[renderer]` | Function | `function (cellData, { columnSummary, column, rowData, rowNumber, tableData, columns })`<br>The function that renders the value in the table. Can return anything React can render. |\n| `[rendererOptions]` | Object | Object of options that can be read by the renderer |\n| `[renderOnNull]` | Boolean | Whether the cell should render if the cellData is null (default: false) |\n| `[simpleRenderer]` | Function | `function (cellData, { column, rowData, rowNumber, tableData, columns })`<br>The function that render the cell's value in a simpler format. Must return a String or Number. |\n| `[sortType]` | String | The `DataType` of the column to be used strictly for sorting, if not provided, uses `type` - number, string, etc |\n| `[sortValue]` | Function | `function (cellData, rowData)`<br>Function to use when sorting instead of `value`. |\n| `[summarize]` | Function | `function (column, tableData, columns)`<br>Produces an object representing a summary of the column (e.g., min and max) to be used in the |\n| `[tdClassName]` | Function or String | `function (cellData, { columnSummary, column, rowData, highlightedColumn, highlightedRow, rowNumber, tableData, columns, isBottomData })`<br>A function that returns a class name based on the cell data and column summary or other information. If a string is provided, it is used directly as the class name. |\n| `[tdStyle]` | Function or Object | `function (cellData, { columnSummary, column, rowData, highlightedColumn, highlightedRow, rowNumber, tableData, columns, isBottomData })`<br>A function that returns the style to be applied to the cell. If an object is provided, it is used directly as the style attribute. |\n| `[thClassName]` | String | The class name to be applied to `<th>` only |\n| `[type]` | String | The `DataType` of the column - number, string, etc |\n| `[value]` | Function or String | `function (rowData, { rowNumber, tableData, columns })`<br>Function to produce cellData's value. If a String, reads that as a key into the rowData object. If not provided, columnId is used as a key into the rowData object. |\n| `[width]` | Number or String | The value to set for the style `width` property on the column. |\n\n\n### Column Groups\n\nColumn groups are defined by objects with the following format:\n\n| Name | Type     | Description   |\n| :----| :------  | :------------ |\n| `[className]` | String | The className to apply to cells and headers in this group |\n| `columns` | String[] | The column IDs to render |\n| `[header]` | Renderable | What shows up in the table header if provided |\n\n\n### Plugins\n\nPlugins are defined by objects with the following format:\n\n| Name | Type     | Description   |\n| :----| :------  | :------------ |\n| `[columnTest]` | Function | A function that takes a column and returns true or false if it the plugin should be run on this column. Default is true for everything. |\n| `id` | String | The ID of the plugin |\n| `[summarize]` | Function | A column summarizer function |\n| `[tdStyle]` | Function or Object | The TD style function |\n| `[tdClassName]` | Function or String | The TD class name function |\n\n\n\n\n# Features\n\n- [x] sort\n- [x] th classes\n- [x] td classes\n- [x] fixed widths\n- [x] striping\n- [x] anything as a th (component, string)\n- [x] formatting\n- [x] value, sort value, render\n- [x] row specific formatting\n- [x] row highlighting\n- [x] column hover\n- [x] highlighting a max or min value\n- [x] column grouping\n- [x] group headers\n- [x] sort indicators\n- [x] heatmap\n- [x] auxiliary data section at bottom of table\n\n#### Feature Roadmap\n- [ ] search within table to filter rows?\n- [ ] loading view\n- [ ] selecting rows\n- [ ] fixed headers\n- [ ] fixed columns\n- [ ] repeat headers every N\n- [ ] CSV export\n- [ ] paging\n- [ ] showing row numbers on hover\n- [ ] ImmutableJS support?\n- [ ] hiding rows below threshold\n- [ ] hiding cells below threshold\n- [ ] expandable rows?\n- [ ] support external callbacks for cell, column, and row highlighting\n- [ ] support prop for persistent highlighting of cell/column/row\n\n\n# Developing\n## Set up\nInstall dependencies with `npm install`\n\n## Building\nTo build files for production, run `grunt build`\n\n## Documentation\nTo generate the documentation, run `npm run docs`. They will appear in `/docs`.\n\n## Site Dev\nTo run the webpack-dev-server for the site, run `grunt site`\n\n### Building the Site\nTo build the prod files for the site, run `grunt site-build`\n\nTo deploy to github pages, run `npm run gh-pages` -- it will do the `grunt site-build` automatically.\n\n\n## Testing\nTo run the tests, run `npm test`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pbeshai/react-taco-table.git"
  },
  "scripts": {
    "build": "grunt build",
    "build-all": "npm run build && npm run docs && npm run site-build",
    "docs": "jsdoc --configure .jsdoc.json --readme README.md",
    "gh-pages": "gh-pages-deploy",
    "site-build": "grunt site-build",
    "test": "ENV=test karma start .karma.conf.js"
  },
  "version": "0.5.1"
}
