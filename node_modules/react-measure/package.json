{
  "_args": [
    [
      {
        "raw": "react-measure@^1.4.6",
        "scope": null,
        "escapedName": "react-measure",
        "name": "react-measure",
        "rawSpec": "^1.4.6",
        "spec": ">=1.4.6 <2.0.0",
        "type": "range"
      },
      "/home/user/work/version/reaction"
    ]
  ],
  "_from": "react-measure@>=1.4.6 <2.0.0",
  "_id": "react-measure@1.4.7",
  "_inCache": true,
  "_location": "/react-measure",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-measure-1.4.7.tgz_1491942873579_0.6515815909951925"
  },
  "_npmUser": {
    "name": "souporserious",
    "email": "travis@souporserious.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-measure@^1.4.6",
    "scope": null,
    "escapedName": "react-measure",
    "name": "react-measure",
    "rawSpec": "^1.4.6",
    "spec": ">=1.4.6 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-measure/-/react-measure-1.4.7.tgz",
  "_shasum": "a1d2ca0dcfef04978b7ac263a765dcb6a0936fdb",
  "_shrinkwrap": null,
  "_spec": "react-measure@^1.4.6",
  "_where": "/home/user/work/version/reaction",
  "author": {
    "name": "Travis Arnold",
    "email": "travis@souporserious.com",
    "url": "http://souporserious.com"
  },
  "bugs": {
    "url": "https://github.com/souporserious/react-measure/issues"
  },
  "dependencies": {
    "get-node-dimensions": "^1.2.0",
    "prop-types": "^15.5.4",
    "resize-observer-polyfill": "^1.4.1"
  },
  "description": "Compute measurements of React components.",
  "devDependencies": {
    "babel-cli": "^6.16.0",
    "babel-core": "^6.17.0",
    "babel-loader": "^6.2.5",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-es2015": "^6.16.0",
    "babel-preset-react": "^6.16.0",
    "babel-preset-stage-0": "^6.16.0",
    "chokidar": "^1.6.1",
    "css-loader": "^0.25.0",
    "git-directory-deploy": "^1.5.1",
    "http-server": "^0.9.0",
    "node-libs-browser": "^1.0.0",
    "node-sass": "^3.2.0",
    "postcss-loader": "^0.13.0",
    "react": "15.3.2",
    "react-dom": "15.3.2",
    "react-motion": "^0.4.2",
    "sass-loader": "^4.0.2",
    "style-loader": "^0.13.1",
    "webpack": "^1.13.2",
    "webpack-dev-server": "^1.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "a1d2ca0dcfef04978b7ac263a765dcb6a0936fdb",
    "tarball": "https://registry.npmjs.org/react-measure/-/react-measure-1.4.7.tgz"
  },
  "files": [
    "dist",
    "lib"
  ],
  "gitHead": "66877a465f10a5dc4abe2cb9dcff2f98c08c5990",
  "homepage": "https://github.com/souporserious/react-measure",
  "keywords": [
    "react",
    "component",
    "measure",
    "measurements",
    "dimensions",
    "element-queries",
    "container-queries",
    "size"
  ],
  "license": "MIT",
  "main": "lib/react-measure.js",
  "maintainers": [
    {
      "name": "souporserious",
      "email": "travis@souporserious.com"
    }
  ],
  "name": "react-measure",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">0.13.0",
    "react-dom": ">0.13.0"
  },
  "readme": "## React Measure\n\n[![npm version](https://badge.fury.io/js/react-measure.svg)](https://badge.fury.io/js/react-measure)\n[![Dependency Status](https://david-dm.org/souporserious/react-measure.svg)](https://david-dm.org/souporserious/react-measure)\n\nCompute measurements of React components. Uses [resize-observer-polyfill](https://github.com/que-etc/resize-observer-polyfill) to detect changes of an element and return the new dimensions.\n\n## Install\n\n`npm install react-measure --save`\n\n```html\n<script src=\"https://unpkg.com/react-measure/dist/react-measure.js\"></script>\n(UMD library exposed as `Measure`)\n```\n\n## Codepen Demo\n\n[Live Demo](http://codepen.io/souporserious/pen/rLdwao/)\n\n## Example Usage w/ state\n\n```javascript\nimport Measure from 'react-measure';\nimport classNames from 'classnames';\n\nclass ItemToMeasure extends Component {\n  state = {\n    dimensions: {\n      width: -1,\n      height: -1\n    }\n  }\n\n  render() {\n    const { width, height } = this.state.dimensions\n    const className = classNames(\n      (width < 400) && 'small-width-modifier'\n    )\n\n    return (\n      <Measure\n        onMeasure={(dimensions) => {\n          this.setState({dimensions})\n        }}\n      >\n        <div className={className}>\n          I can do cool things with my dimensions now :D\n\n          { (height > 250) &&\n            <div>Render responsive content based on the component size!</div>\n          }\n        </div>\n      </Measure>\n    )\n  }\n}\n```\n\n## Example Usage w/ child function\n\n```javascript\nimport Measure from 'react-measure';\n\nconst ItemToMeasure = () => (\n  <Measure>\n    { dimensions =>\n      <div>\n        Some content here\n        <pre>\n          {JSON.stringify(dimensions, null, 2)}\n        </pre>\n      </div>\n    }\n  </Measure>\n)\n```\n\n## Props\n\n#### `whitelist`: PropTypes.array\n\nProvide a list of properties that determine when `onMeasure` should fire. Accepts any of the following properties `['width', 'height', 'top', 'right', 'bottom', 'left']`\n\n#### `blacklist`: PropTypes.array\n\nLike above, but will not fire `onMeasure` for the specified properties.\n\n#### `includeMargin`: PropTypes.bool\n\nWhether or not to include margins in calculation. Defaults to `true`.\n\n#### `useClone`: PropTypes.bool\n\nTries to give the most accurate measure by cloning the element and measuring it. Use if your item is hidden or you want to determine what a new dimension will be.\n\n#### `cloneOptions`: PropTypes.Object\n\nPasses clone options to [getNodeDimensions](https://github.com/souporserious/get-node-dimensions).\n\n#### `shouldMeasure`: PropTypes.bool\n\nDetermines whether or not a measurement should occur. Useful if you only need to measure in certain cases.\n\n#### `onMeasure`: PropTypes.func\n\nCallback when the component dimensions have changed. Receives the new `dimensions` of your component.\n\n## Good to knows\nTo help avoid layout thrashing, use the prop `blacklist` to ignore specific values and stop firing a render to check the DOM for changes. Likewise you can use `whitelist` to choose only the ones you need to check.\n\n**Margins from hell.** If your element is not calculating width or height properly it could be due to a margin hanging outside of its container. To get a true measurement, make sure to not have any hanging margins, in some cases a padding of 1px added to the container will fix this. See the stack overflow answers [here](http://stackoverflow.com/questions/19718634/how-to-disable-margin-collapsing) for more tricks .\n\n## Run Example\n\nclone repo\n\n`git clone git@github.com:souporserious/react-measure.git`\n\nmove into folder\n\n`cd ~/react-measure`\n\ninstall dependencies\n\n`npm install`\n\nrun dev mode\n\n`npm run dev`\n\nopen your browser and visit: `http://localhost:8080/`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/souporserious/react-measure.git"
  },
  "scripts": {
    "build": "npm run build:lib && NODE_ENV=production webpack --config webpack.prod.config.js",
    "build:lib": "babel src --out-dir lib",
    "deploy": "NODE_ENV=production TARGET=minify webpack && git-directory-deploy --directory example --branch gh-pages",
    "dev": "webpack-dev-server --inline --hot --progress --colors --host 0.0.0.0 --devtool eval",
    "postbuild": "NODE_ENV=production TARGET=minify webpack --config webpack.prod.config.js",
    "prebuild": "rm -rf dist && mkdir dist",
    "prepublish": "npm run build"
  },
  "version": "1.4.7"
}
