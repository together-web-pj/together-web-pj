{
  "_args": [
    [
      {
        "raw": "match-sorter@^1.8.0",
        "scope": null,
        "escapedName": "match-sorter",
        "name": "match-sorter",
        "rawSpec": "^1.8.0",
        "spec": ">=1.8.0 <2.0.0",
        "type": "range"
      },
      "/home/user/work/version/reaction"
    ]
  ],
  "_from": "match-sorter@>=1.8.0 <2.0.0",
  "_id": "match-sorter@1.8.1",
  "_inCache": true,
  "_location": "/match-sorter",
  "_nodeVersion": "6.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/match-sorter-1.8.1.tgz_1501711660493_0.9047475026454777"
  },
  "_npmUser": {
    "name": "kentcdodds",
    "email": "kent@doddsfamily.us"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "match-sorter@^1.8.0",
    "scope": null,
    "escapedName": "match-sorter",
    "name": "match-sorter",
    "rawSpec": "^1.8.0",
    "spec": ">=1.8.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/match-sorter/-/match-sorter-1.8.1.tgz",
  "_shasum": "5b164e526c261dc8628db925430facbe0cd26614",
  "_shrinkwrap": null,
  "_spec": "match-sorter@^1.8.0",
  "_where": "/home/user/work/version/reaction",
  "author": {
    "name": "Kent C. Dodds",
    "email": "kent@doddsfamily.us",
    "url": "http://kentcdodds.com/"
  },
  "bugs": {
    "url": "https://github.com/kentcdodds/match-sorter/issues"
  },
  "bundleDependencies": [
    "diacritic",
    "global-object"
  ],
  "config": {
    "commitizen": {
      "path": "node_modules/cz-conventional-changelog"
    }
  },
  "dependencies": {
    "diacritic": "0.0.2",
    "global-object": "1.0.0"
  },
  "description": "Simple, expected, and deterministic best-match sorting of an array in JavaScript",
  "devDependencies": {
    "all-contributors-cli": "^4.0.1",
    "babel-cli": "^6.23.0",
    "babel-jest": "^19.0.0",
    "babel-polyfill": "^6.23.0",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-stage-2": "^6.22.0",
    "codecov": "^1.0.1",
    "commitizen": "^2.9.6",
    "cz-conventional-changelog": "^2.0.0",
    "eslint": "^3.16.1",
    "eslint-config-kentcdodds": "^12.0.0",
    "husky": "^0.13.2",
    "jest-cli": "^19.0.2",
    "nodemon": "^1.11.0",
    "nps": "^5.0.3",
    "nps-utils": "^1.1.2",
    "opt-cli": "^1.4.2",
    "rimraf": "^2.6.1",
    "rollup": "^0.41.4",
    "rollup-plugin-babel": "^2.6.1",
    "rollup-plugin-commonjs": "^7.0.0",
    "rollup-plugin-node-resolve": "^2.0.0",
    "rollup-plugin-uglify": "^1.0.1",
    "semantic-release": "^6.3.2",
    "validate-commit-msg": "^2.11.1"
  },
  "directories": {},
  "dist": {
    "shasum": "5b164e526c261dc8628db925430facbe0cd26614",
    "tarball": "https://registry.npmjs.org/match-sorter/-/match-sorter-1.8.1.tgz"
  },
  "eslintConfig": {
    "extends": [
      "kentcdodds",
      "kentcdodds/jest"
    ]
  },
  "files": [
    "dist"
  ],
  "gitHead": "d6210437a2ab057d538d827231c13722fe06ea95",
  "homepage": "https://github.com/kentcdodds/match-sorter#readme",
  "jest": {
    "cacheDirectory": "./node_modules/.cache",
    "testEnvironment": "node",
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    }
  },
  "keywords": [],
  "license": "MIT",
  "main": "dist/cjs/index.js",
  "maintainers": [
    {
      "name": "kentcdodds",
      "email": "kent@doddsfamily.us"
    }
  ],
  "name": "match-sorter",
  "optionalDependencies": {},
  "readme": "# match-sorter\n\nSimple, expected, and deterministic best-match sorting of an array in JavaScript. **[Demo](https://jsbin.com/vewoka/edit?js,output)**\n\n[![Build Status][build-badge]][build]\n[![Code Coverage][coverage-badge]][coverage]\n[![Dependencies][dependencyci-badge]][dependencyci]\n[![version][version-badge]][package]\n[![downloads][downloads-badge]][npm-stat]\n[![MIT License][license-badge]][LICENSE]\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-6-orange.svg?style=flat-square)](#contributors)\n[![PRs Welcome][prs-badge]][prs]\n[![Donate][donate-badge]][donate]\n[![Code of Conduct][coc-badge]][coc]\n[![Roadmap][roadmap-badge]][roadmap]\n[![Examples][examples-badge]][examples]\n\n[![gzip size][gzip-badge]][unpkg-umd]\n[![size][size-badge]][unpkg-umd]\n[![module formats: umd and cjs][module-formats-badge]][module-formats]\n[![Watch on GitHub][github-watch-badge]][github-watch]\n[![Star on GitHub][github-star-badge]][github-star]\n[![Tweet][twitter-badge]][twitter]\n\n## The problem\n\n1. You have a list of dozens, hundreds, or thousands of items\n2. You want to filter and sort those items intelligently (maybe you have a filter input for the user)\n3. You want simple, expected, and deterministic sorting of the items (no fancy math algorithm that fancily changes the sorting as they type)\n\n## This solution\n\nThis follows a simple and sensible (user friendly) algorithm that makes it easy for you to filter and sort a list of items based on given input. Items are ranked based on sensible criteria that result in a better user experience.\n\nTo explain the ranking system, I'll use countries as an example:\n\n1. **CASE SENSITIVE EQUALS**: Case-sensitive equality trumps all. These will be first. (ex. `France` would match `France `, but not `france`)\n2. **EQUALS**: Case-insensitive equality (ex. `France` would match `france`)\n3. **STARTS WITH**: If the item starts with the given value (ex. `Sou` would match `South Korea` or `South Africa`)\n4. **WORD STARTS WITH**: If the item has multiple words, then if one of those words starts with the given value (ex. `Repub` would match `Dominican Republic`)\n5. **CONTAINS**: If the item contains the given value (ex. `ham` would match `Bahamas`)\n6. **ACRONYM**: If the item's acronym is the given value (ex. `us` would match `United States`)\n7. **SIMPLE MATCH**: If the item has letters in the same order as the letters of the given value (ex. `iw` would match `Zimbabwe`, but not `Kuwait` because it must be in the same order). Furthermore, if the item is a closer match, it will rank higher (ex. `ua` matches `Uruguay` more closely than `United States of America`, therefore `Uruguay` will be ordered before `United States of America`)\n\nThis ranking seems to make sense in people's minds. At least it does in mine. Feedback welcome!\n\n\n## Getting Started\n\n### Installation\n\nThis module is distributed via [npm][npm] which is bundled with [node][node] and should\nbe installed as one of your project's `dependencies`:\n\n```\nnpm install --save match-sorter\n```\n\n### Usage\n\n```javascript\nconst matchSorter = require('match-sorter')\n// ES6 imports work too\n// Also available in global environment via `matchSorter` global\nconst list = ['hi', 'hey', 'hello', 'sup', 'yo']\nmatchSorter(list, 'h') // ['hi', 'hey', 'hello']\nmatchSorter(list, 'y') // ['yo', 'hey']\nmatchSorter(list, 'z') // []\n```\n\n## Advanced options\n\n### keys: `[string]`\n\n_Default: `undefined`_\n\nBy default it just uses the value itself as above. Passing an array tells match-sorter which keys to use for the ranking.\n\n```javascript\nconst objList = [\n  {name: 'Janice', color: 'Green'},\n  {name: 'Fred', color: 'Orange'},\n  {name: 'George', color: 'Blue'},\n  {name: 'Jen', color: 'Red'},\n]\nmatchSorter(objList, 'g', {keys: ['name', 'color']})\n// [{name: 'George', color: 'Blue'}, {name: 'Janice', color: 'Green'}, {name: 'Fred', color: 'Orange'}]\n\nmatchSorter(objList, 're', {keys: ['color', 'name']})\n// [{name: 'Jen', color: 'Red'}, {name: 'Janice', color: 'Green'}, {name: 'Fred', color: 'Orange'}, {name: 'George', color: 'Blue'}]\n```\n\n__Array of values__: When the specified key matches an array of values, the best match from the values of in the array is going to be used for the ranking.\n\n```javascript\nconst iceCreamYum = [\n  {favoriteIceCream: ['mint', 'chocolate']},\n  {favoriteIceCream: ['candy cane', 'brownie']},\n  {favoriteIceCream: ['birthday cake', 'rocky road', 'strawberry']},\n]\nmatchSorter(iceCreamYum, 'cc', {keys: ['favoriteIceCream']})\n// [{favoriteIceCream: ['candy cane', 'brownie']}, {favoriteIceCream: ['mint', 'chocolate']}]\n```\n\n__Nested Keys__: You can specify nested keys using dot-notation.\n\n```javascript\nconst nestedObjList = [\n  {name: {first: 'Janice'}},\n  {name: {first: 'Fred'}},\n  {name: {first: 'George'}},\n  {name: {first: 'Jen'}},\n]\nmatchSorter(nestedObjList, 'j', {keys: ['name.first']})\n// [{name: {first: 'Janice'}}, {name: {first: 'Jen'}}]\n```\n\n__Property Callbacks__: Alternatively, you may also pass in a callback function that resolves the value of the key(s) you wish to match on. This is especially useful when interfacing with libraries such as Immutable.js\n\n```javascript\nconst list = [\n  {name: 'Janice'},\n  {name: 'Fred'},\n  {name: 'George'},\n  {name: 'Jen'},\n]\nmatchSorter(list, 'j', {keys: [(item) => item.name]})\n// [{name: 'Janice'}, {name: 'Jen'}]\n```\n\n__Min and Max Ranking__: You may restrict specific keys to a minimum or maximum ranking by passing in an object. A key with a minimum rank will only get promoted if there is at least a simple match.\n\n```javascript\nconst tea = [\n  {tea: 'Earl Grey', alias: 'A'},\n  {tea: 'Assam', alias: 'B'},\n  {tea: 'Black', alias: 'C'},\n]\nmatchSorter(tea, 'A', {keys: ['tea', {maxRanking: matchSorter.rankings.STARTS_WITH, key: 'alias'}]})\n// without maxRanking, Earl Grey would come first because the alias \"A\" would be CASE_SENSITIVE_EQUAL\n// `tea` key comes before `alias` key, so Assam comes first even though both match as STARTS_WITH\n// [{tea: 'Assam', alias: 'B'}, {tea: 'Earl Grey', alias: 'A'},{tea: 'Black', alias: 'C'}]\n```\n\n```javascript\nconst tea = [\n  {tea: 'Milk', alias: 'moo'},\n  {tea: 'Oolong', alias: 'B'},\n  {tea: 'Green', alias: 'C'},\n]\nmatchSorter(tea, 'oo', {keys: ['tea', {minRanking: matchSorter.rankings.EQUAL, key: 'alias'}]})\n// minRanking bumps Milk up to EQUAL from CONTAINS (alias)\n// Oolong matches as STARTS_WITH\n// Green is missing due to no match\n// [{tea: 'Milk', alias: 'moo'}, {tea: 'Oolong', alias: 'B'}]\n```\n### threshold: `number`\n\n_Default: `MATCHES`_\n\nThresholds can be used to specify the criteria used to rank the results.\nAvailable thresholds (from top to bottom) are:\n * CASE_SENSITIVE_EQUAL\n * EQUAL\n * STARTS_WITH\n * WORD_STARTS_WITH\n * CONTAINS\n * ACRONYM\n * MATCHES _(default value)_\n * NO_MATCH\n\n```javascript\nconst fruit = ['orange', 'apple', 'grape', 'banana']\nmatchSorter(fruit, 'ap', {threshold: matchSorter.rankings.NO_MATCH})\n// ['apple', 'grape', 'orange', 'banana'] (returns all items, just sorted by best match)\n\nconst things = ['google', 'airbnb', 'apple', 'apply', 'app'],\nmatchSorter(things, 'app', {threshold: matchSorter.rankings.EQUAL})\n// ['app'] (only items that are equal)\n\nconst otherThings = ['fiji apple', 'google', 'app', 'crabapple', 'apple', 'apply']\nmatchSorter(otherThings, 'app', {threshold: matchSorter.rankings.WORD_STARTS_WITH})\n// ['app', 'apple', 'apply', 'fiji apple'] (everything that matches with \"word starts with\" or better)\n```\n\n### keepDiacritics: `boolean`\n\n_Default: `false`_\n\nBy default, match-sorter will strip diacritics before doing any comparisons.\nThis is the default because it makes the most sense from a UX perspective.\n\nYou can disable this behavior by specifying `keepDiacritics: true`\n\n```javascript\nconst thingsWithDiacritics = ['jalapeño', 'à la carte', 'café', 'papier-mâché', 'à la mode']\nmatchSorter(thingsWithDiacritics, 'aa')\n// ['jalapeño', 'à la carte', 'à la mode', 'papier-mâché']\n\nmatchSorter(thingsWithDiacritics, 'aa', {keepDiacritics: true})\n// ['jalapeño', 'à la carte']\n\nmatchSorter(thingsWithDiacritics, 'à', {keepDiacritics: true})\n// ['à la carte', 'à la mode']\n```\n\n## Using ES6?\n\nIn the examples above, we're using CommonJS. If you're using ES6 modules, then you can do:\n\n`import matchSorter, {rankings} from 'match-sorter'`\n\n## Inspiration\n\nActually, most of this code was extracted from the _very first_ library I ever wrote: [genie][genie]!\n\n## Other Solutions\n\nYou might try [Fuse.js](https://github.com/krisk/Fuse). It uses advanced math fanciness to get the closest match. Unfortunately what's \"closest\" doesn't always really make sense. So I extracted this from [genie][genie].\n\n## Contributors\n\nThanks goes to these people ([emoji key][emojis]):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n| [<img src=\"https://avatars.githubusercontent.com/u/1500684?v=3\" width=\"100px;\"/><br /><sub>Kent C. Dodds</sub>](https://kentcdodds.com)<br />[💻](https://github.com/kentcdodds/match-sorter/commits?author=kentcdodds) [📖](https://github.com/kentcdodds/match-sorter/commits?author=kentcdodds) 🚇 [⚠️](https://github.com/kentcdodds/match-sorter/commits?author=kentcdodds) 👀 | [<img src=\"https://avatars.githubusercontent.com/u/8263298?v=3\" width=\"100px;\"/><br /><sub>Conor Hastings</sub>](http://conorhastings.com)<br />[💻](https://github.com/kentcdodds/match-sorter/commits?author=conorhastings) [📖](https://github.com/kentcdodds/match-sorter/commits?author=conorhastings) [⚠️](https://github.com/kentcdodds/match-sorter/commits?author=conorhastings) 👀 | [<img src=\"https://avatars.githubusercontent.com/u/574806?v=3\" width=\"100px;\"/><br /><sub>Rogelio Guzman</sub>](https://github.com/rogeliog)<br />[📖](https://github.com/kentcdodds/match-sorter/commits?author=rogeliog) | [<img src=\"https://avatars.githubusercontent.com/u/1416436?v=3\" width=\"100px;\"/><br /><sub>Claudéric Demers</sub>](http://ced.io)<br />[💻](https://github.com/kentcdodds/match-sorter/commits?author=clauderic) [📖](https://github.com/kentcdodds/match-sorter/commits?author=clauderic) [⚠️](https://github.com/kentcdodds/match-sorter/commits?author=clauderic) | [<img src=\"https://avatars3.githubusercontent.com/u/4150097?v=3\" width=\"100px;\"/><br /><sub>Kevin Davis</sub>](kevindav.us)<br />[💻](https://github.com/kentcdodds/match-sorter/commits?author=osfan501) [⚠️](https://github.com/kentcdodds/match-sorter/commits?author=osfan501) | [<img src=\"https://avatars1.githubusercontent.com/u/19157735?v=3\" width=\"100px;\"/><br /><sub>Denver Chen</sub>](https://github.com/nfdjps)<br />[💻](https://github.com/kentcdodds/match-sorter/commits?author=nfdjps) [📖](https://github.com/kentcdodds/match-sorter/commits?author=nfdjps) [⚠️](https://github.com/kentcdodds/match-sorter/commits?author=nfdjps) |\n| :---: | :---: | :---: | :---: | :---: | :---: |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors][all-contributors] specification. Contributions of any kind welcome!\n\n## LICENSE\n\nMIT\n\n[npm]: https://www.npmjs.com/\n[node]: https://nodejs.org\n[build-badge]: https://img.shields.io/travis/kentcdodds/match-sorter.svg?style=flat-square\n[build]: https://travis-ci.org/kentcdodds/match-sorter\n[coverage-badge]: https://img.shields.io/codecov/c/github/kentcdodds/match-sorter.svg?style=flat-square\n[coverage]: https://codecov.io/github/kentcdodds/match-sorter\n[dependencyci-badge]: https://dependencyci.com/github/kentcdodds/match-sorter/badge?style=flat-square\n[dependencyci]: https://dependencyci.com/github/kentcdodds/match-sorter\n[version-badge]: https://img.shields.io/npm/v/match-sorter.svg?style=flat-square\n[package]: https://www.npmjs.com/package/match-sorter\n[downloads-badge]: https://img.shields.io/npm/dm/match-sorter.svg?style=flat-square\n[npm-stat]: http://npm-stat.com/charts.html?package=match-sorter&from=2016-04-01\n[license-badge]: https://img.shields.io/npm/l/match-sorter.svg?style=flat-square\n[license]: https://github.com/kentcdodds/match-sorter/blob/master/other/LICENSE\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[donate-badge]: https://img.shields.io/badge/$-support-green.svg?style=flat-square\n[donate]: http://kcd.im/donate\n[coc-badge]: https://img.shields.io/badge/code%20of-conduct-ff69b4.svg?style=flat-square\n[coc]: https://github.com/kentcdodds/match-sorter/blob/master/other/CODE_OF_CONDUCT.md\n[roadmap-badge]: https://img.shields.io/badge/%F0%9F%93%94-roadmap-CD9523.svg?style=flat-square\n[roadmap]: https://github.com/kentcdodds/match-sorter/blob/master/other/ROADMAP.md\n[examples-badge]: https://img.shields.io/badge/%F0%9F%92%A1-examples-8C8E93.svg?style=flat-square\n[examples]: https://github.com/kentcdodds/match-sorter/blob/master/other/EXAMPLES.md\n[github-watch-badge]: https://img.shields.io/github/watchers/kentcdodds/match-sorter.svg?style=social\n[github-watch]: https://github.com/kentcdodds/match-sorter/watchers\n[github-star-badge]: https://img.shields.io/github/stars/kentcdodds/match-sorter.svg?style=social\n[github-star]: https://github.com/kentcdodds/match-sorter/stargazers\n[twitter]: https://twitter.com/intent/tweet?text=Check%20out%20match-sorter!%20https://github.com/kentcdodds/match-sorter%20%F0%9F%91%8D\n[twitter-badge]: https://img.shields.io/twitter/url/https/github.com/kentcdodds/match-sorter.svg?style=social\n[emojis]: https://github.com/kentcdodds/all-contributors#emoji-key\n[all-contributors]: https://github.com/kentcdodds/all-contributors\n[genie]: https://github.com/kentcdodds/genie\n[gzip-badge]: http://img.badgesize.io/https://unpkg.com/match-sorter/dist/umd/match-sorter.min.js?compression=gzip&label=gzip%20size&style=flat-square\n[size-badge]: http://img.badgesize.io/https://unpkg.com/match-sorter/dist/umd/match-sorter.min.js?label=size&style=flat-square\n[unpkg-umd]: https://unpkg.com/match-sorter/dist/umd/\n[module-formats-badge]: https://img.shields.io/badge/module%20formats-umd%2C%20cjs-green.svg?style=flat-square\n[module-formats]: https://unpkg.com/match-sorter@1.8.0/dist/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kentcdodds/match-sorter.git"
  },
  "scripts": {
    "commitmsg": "opt --in commit-msg --exec \"validate-commit-msg\"",
    "precommit": "opt --in pre-commit --exec \"npm start validate\"",
    "start": "nps",
    "test": "nps test"
  },
  "version": "1.8.1"
}
