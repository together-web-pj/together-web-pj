{
  "_id": "global-object@1.0.0",
  "_location": "/match-sorter/global-object",
  "_phantomChildren": {},
  "_requiredBy": [
    "/match-sorter"
  ],
  "_shrinkwrap": null,
  "author": {
    "name": "Andrea Giammarchi"
  },
  "bugs": {
    "url": "https://github.com/WebReflection/global-object/issues"
  },
  "dependencies": {},
  "description": "just the global object",
  "devDependencies": {},
  "homepage": "https://github.com/WebReflection/global-object",
  "keywords": [
    "global"
  ],
  "license": "WTFPL",
  "main": "global-object.js",
  "name": "global-object",
  "optionalDependencies": {},
  "readme": "# global-object\n\nThere are at least 3 different ways to reference the global object mentioned in ES6/2015\n\n  * `window` historically on HTML pages\n  * `self` in Workers, and historically on HTML pages too\n  * `global` in basically all server side implementation of JavaScript\n\nIf we search in Github, the summed amount of `typeof window` or `typeof global` checks,\nmostly to understand which one is available, is about 23 millions of times.\n\nThis is madness, and since there's no reason at all to prefer anything different from `global`\nfor an object defined indeed as the global object in the global scope, I've decided to create\nthis page in order to put an end to all this.\n\n- - - -\n\nForget about `window` and `self` in Workers, normalize your work-flow once for all\nand with or without browserify in place!\n\n\n### As first script in your page\nThis is the most straight forward way to have it defined everywhere as such\n```html\n<script>var global=global||this;</script>\n```\nNo need to disturb the network, no need to ever update the script even if a browser\nwill eventually expose `global` reference. It goes there to stay.\n\n\n### As first script in your Worker\nSame goes with Web Workers and others, the code is exactly the same, without the node:\n```html\nvar global=global||this;\n```\nForget about `self` or `typeof window` checks, we've got `global`!\n\n\n### As anything else\nES6, node itself, whatever ... \n```js\n// ES6\nimport global from 'global-object';\n\n// npm require\nvar global = require('global-object');\n\n// browser\nscript.src = 'global-object.js';\n```\nJust use [global-object](global-object.js)\n\n\n### Strict compatible!\nYes, the `this` reference in the global scope is always the global object.\nIn HTML pages like in workers, it will work everywhere even after `\"use strict\"` directive!\n\n\n### Content Security Policy Compatible\nUsing this meta will solve all problems:\n```html\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'unsafe-inline' 'self' 'sha1-WWQNP0ydesPxK1yAm94nH5bQoIo=' 'sha256-5rMu52Es8MMWNrCqRkunbIAeVDz8iJ63wD0rPm57xi4='\">\n```\nGreat, no network request required, and `global` available under CSP too!\n\n\n### License\nNope, nothing ... do what you want, literally!",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/WebReflection/global-object.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.0"
}
